{# This file is part of DBL, released under MIT license.
 # See LICENSE for details.
 #}

import open RedBlackTree

{#
 # Signature
 #}

data Interval Value = Inclusion of Value | Exclusion of Value

implicit ~onError

pub data Map Key = Map of {
    T 
    {# @brief Creates empty map
    #}
    , empty : {type Val} -> T Val
    {# @brief Method to testing whether given map is empty or not
      # @return True if it's empty false otherwise
    #}
    , method isEmpty : {type Val} -> T Val -> [] Bool
    {# @brief Method for inserting element to the map
      # @param Key which will be inserted to the map
      # @param Value which will be inserted to the map
      # @return Map with inserted value
    #}
    , method insert : {type Val} -> T Val -> 
        Key -> Val -> [] T Val
    {# @brief Method for inserting element to the map
      # @param Key which will be inserted to the map
      # @param Value which will be inserted to the map
      # @return Map with inserted value 
        and boolean value if the value was changed 
        if the key already existed in map 
    #}
    , method insertChange : {type Val} -> T Val -> 
        Key -> Val -> [] (Pair (T Val) Bool)
    {# @brief Method for removing key from the map
      # @param Key which will be removed to the map
      # @return Map with removed key
    #}
    , method remove : {type Val} -> T Val -> 
        Key -> [] T Val
    {# @brief Method for removing key from the map
      # @param Key which will be removed to the map
      # @return Map with removed key 
        and boolean value if the map was changed 
    #}
    , method removeChange : {type Val} -> T Val ->
        Key -> [] (Pair (T Val) Bool)
    {# @brief Method for checking if a given key is present in a map
    #}
    , method member : {type Val} -> T Val -> Key -> [] Bool
    , method find : {type Val} -> T Val -> Key -> [] Option Val
    {# @brief method that searches for an item and returns value 
      #         based on the search 
      # @param key
      # @param absentf what value return if the element doesn't exist
      # @param presentf what value return if the element exist
      # @return tuple of found an item and it's value, 
      # result of a given function absentf or presentf and orginal tree
    #}
    , method operate : {type Val,E} -> T Val -> Key ->
        (Unit -> [|E] Option Val) -> (Val -> [|E] Option Val) -> 
        [|E] (Pair (Pair (Option Val) (Option Val)) (T Val))
    {# @brief Method to fold left through structure of map
      # @param Function that receives key, value and accumulator
      # @param Accumulator
      # @return Result of applying function on keys 
        and values of map and accumulator
    #}
    , method foldl : {type Val, type A,E} -> T Val -> 
        (Key -> Val -> A -> [|E] A) -> A -> [|E] A
    {# @brief Method to fold right through structure of map
      # @param Function that receives key, value and accumulator
      # @param Accumulator
      # @return Result of applying function on keys 
        and values of map and accumulator
    #}
    , method foldr : {type Val, type A,E} -> T Val -> 
        (Key -> Val -> A -> [|E] A) -> A -> [|E] A
    {# @brief Method that returns list of pairs (key,value)
    #}
    , method toList : {type Val} -> T Val -> [] List (Pair Key Val)
    {# @brief Method that returns list of values
    #}
    , method toValueList : {type Val} -> T Val -> [] List Val
    {# @brief Method that returns list of keys
    #}
    , method domain : {type Val} -> T Val -> [] List Key
    {# @brief Method that maps all values in a map to diffrent value
    #}
    , method mapVal : {type Val, type A,E} -> T Val -> 
        (Val -> [|E] A) -> [|E] T A
    {# @brief Method that maps all (key,value) in a map to (key, func key)
    #}
    , method mapKey : {type Val, type A,E} -> T Val -> 
        (Key -> [|E] A) -> [|E] T A
    {#  @brief Method that applies function to every key and value
    #}
    , method app : {type Val,E} -> T Val -> 
        (Key -> Val -> [|E] Unit) -> [|E] Unit
    {# @brief Method that joins two maps
      # @param Function that resolves conflicts 
      # if maps have the same key
    #}
    , method union : {type Val,E} -> T Val -> T Val ->
        (Key -> Val -> Val -> [|E] Val) -> [|E] T Val
    {# @brief Method that splits map into two maps one with 
      # the keys lower then given key, the other with greater.
      # @return map with lower keys, Some value if key was present,
      # map with greater keys 
    #}
    , method partion : {type Val} -> T Val -> Key ->
        [] (Pair (Pair (T Val) (Option Val)) (T Val))
    {# @brief Method that splits map into two maps one with 
      # the keys lower then given key, the other with greater or equal.
    #}
    , method partionLt : {type Val} -> T Val -> Key ->
        [] Pair (T Val) (T Val)
    {# @brief Method that splits map into two maps one with 
      # the keys lower or equal then given key, the other with greater.
    #}
    , method partionGt : {type Val} -> T Val -> Key ->
        [] Pair (T Val) (T Val)
    {# @brief Method that gives a submap in a given range 
      # @param First Bool - if the submap should include lower key or not
      # @param First Elem - lower key which all elements 
      #   in returned map will be greater (or equal)
      # @param Second Bool - if the submap should include upper key or not
      # @param Second Elem - upper key which all elements
      #   in returned map will be lower (or equal)  
      # @return Submap in a given range
    #}
    , method range : {type Val} -> T Val -> Bool -> Key ->
        Bool -> Key -> [] T Val
    {# @brief Method that returns lowest pair (key,value) in a map
      # @return Some (key,value) if the smallest key exist or otherwise None
    #}
    , method lowerBound : {type Val} -> T Val -> [] Option (Pair Key Val)
    {# @brief Method that returns lowest pair (key,value) in a map
      # @return (key,value) or error
    #}
    , method lowerBoundErr : 
      {type Val, Err, ~onError : Unit -> [Err] (Pair Key Val)} -> 
      T Val -> [Err] (Pair Key Val)
    {# @brief Method that returns greatest pair (key,value) in a map
      # @return Some (key,value) if the greatest key exist or otherwise None
    #}
    , method upperBound : {type Val} -> T Val -> [] Option (Pair Key Val)
    {# @brief Method that returns greatest pair (key,value) in a map
      # @return (key,value) or error
    #}
    , method upperBoundErr : 
      {type Val, Err, ~onError : Unit -> [Err] (Pair Key Val)} -> 
      T Val -> [Err] (Pair Key Val)
    {# @brief Method that returns the lowest (key,value) greater than given key
      # @return Some (key,value) or None
    #}
    , method lowerBoundGt : {type Val} -> T Val -> Key -> 
      [] Option (Pair Key Val)
    {# @brief Method that returns the lowest (key,value) greater than given key
      # @return (key,value) or error
    #}
    , method lowerBoundGtErr :
      {type Val, Err, ~onError : Unit -> [Err] (Pair Key Val)} ->
      T Val -> Key -> [Err] (Pair Key Val)
    {# @brief Method that returns the lowest (key,value) greater 
      # or equal than given key
      # @return Some (key,value) or None
    #}
    , method lowerBoundGeq : {type Val} -> T Val -> Key -> 
      [] Option (Pair Key Val)
    {# @brief Method that returns the lowest (key,value) greater 
      # or equal than given key
      # @return (key,value) or error
    #}
    , method lowerBoundGeqErr :
      {type Val, Err, ~onError : Unit -> [Err] (Pair Key Val)} ->
      T Val -> Key -> [Err] (Pair Key Val)
    {# @brief Method that returns the greatest (key,value) lower than given key
      # @return Some (key,value) or None
    #}
    , method upperBoundLt : {type Val} -> T Val -> 
        Key -> [] Option (Pair Key Val)
    {# @brief Method that returns the greatest (key,value) lower than given key
      # @return (key,value) or error
    #}
    , method upperBoundLtErr :
      {type Val, Err, ~onError : Unit -> [Err] (Pair Key Val)} ->
      T Val -> Key -> [Err] (Pair Key Val)
      {# @brief Method that returns the greatest (key,value) lower 
        # or equal than given key
        # @return Some (key,value) or None
      #}
    , method upperBoundLeq : {type Val,E} -> T Val ->
        Key -> [] Option (Pair Key Val)
      {# @brief Method that returns the greatest (key,value) lower 
        # or equal than given key
        # @return (key,value) or error
      #}
    , method upperBoundLeqErr :
      {type Val, Err, ~onError : Unit -> [Err] (Pair Key Val)} ->
      T Val -> Key -> [Err] (Pair Key Val)
}

# implementation 

let isEmpty tree =
  match tree with 
    | Leaf => True 
    | _ => False 
  end

let insert compare tree key val = 
  match search (fn (key', _ ) => compare key key') tree [] with
    | (Leaf, zipper) => zipRed (key,val) Leaf Leaf zipper
    | ((Node {color, size = bulk, left, right}), zipper) =>
      zip (construct color bulk left (key,val) right) zipper
  end

let insert' compare tree key val =
  match search (fn (key', _ ) => compare key key') tree [] with
    | (Leaf, zipper) => (zipRed (key,val) Leaf Leaf zipper, False)
    | ((Node {color, size = bulk, left, right}), zipper) =>
      (zip (construct color bulk left (key,val) right) zipper, True)
  end

let remove compare tree key =
  match search (fn (key', _ ) => compare key key') tree [] with
    | (Leaf,_) => tree
    | (Node {color, left, right}, zipper) =>
      delete color left right zipper
  end

let remove' compare tree key =
  match search (fn (key', _ ) => compare key key') tree [] with
    | (Leaf,_) => (tree,False)
    | (Node {color, left, right}, zipper) =>
      (delete color left right zipper, True)
  end

let rec member compare tree key =
  match tree with
    | Leaf => False
    | Node {left, value = (key',_), right} => 
      match compare key key' with 
        | Less => member compare left key
        | Equal => True
        | Greater => member compare right key
      end
  end

let rec find compare tree key =
  match tree with 
    | Leaf => None
    | Node {left, value = (key', val),  right} =>
      match compare key key' with
        | Less => find compare left key
        | Equal => Some val
        | Greater => find compare right key
      end
  end 

let rec operate compare tree key absentf presentf =
  match search (fn (key', _ ) => compare key key') tree [] with
  | (Leaf, zipper) => match absentf () with
      | None => (None,None, tree)
      | Some x => (None,Some x, zipRed (key,x) Leaf Leaf zipper)
    end
  | (Node {color, size = bulk, left, value = (_, val), right}, zipper) =>
    match presentf val with 
      | None => (Some val, None, delete color left right zipper)
      | Some x => (Some val, Some x, zip 
        (construct color bulk left (key,x) right) zipper)
    end
  end 

let rec foldr func tree acc = 
  match tree with
    | Leaf => acc
    | Node {left, value = (key, val), right} => 
      let val_right = (foldr func right acc) in
      let val_middle = (func key val val_right) in 
      foldr func left val_middle
  end

let rec foldl func tree acc =
  match tree with
    | Leaf => acc
    | Node {left, value = (key, val), right} => 
        let val_left = (foldl func left acc) in
        let val_middle = (func key val val_left) 
        in foldl func right val_middle
  end 

let rec map tree func = 
  match tree with
    | Leaf => Leaf
    | Node {color, size, left, value = (key,value), right} => 
      construct color size (map left func) (key,func value) (map right func)
  end

let rec map2 tree func = 
  match tree with
    | Leaf => Leaf
    | Node {color, size = bulk, left, value = (key, _), right} => 
      construct color bulk (map2 left func) (key, func key) (map2 right func)
  end

let rec app tree func = 
  match tree with 
    | Leaf => ()
    | Node {left, value = (key,value), right} => 
      app left func; func key value; app right func
  end

let rec union compare tree1 tree2 merge = 
  match tree1 with
  | Leaf => tree2
  | Node {left = left1, value = (key1,value1), right = right1} =>
    match tree2 with 
    | Leaf => tree1
    | _ => 
      let (output,left2,right2) = 
      split (fn (key2,_) => compare key1 key2) tree2
      in 
        let new_pair = 
          match output with
            | None => (key1,value1)
            | Some (_,value2) => (key1, merge key1 value1 value2)
          end 
        in 
          joinVal (union compare left1 left2 merge) new_pair
          (union compare right1 right2 merge)
    end
  end

let partionLt compare tree key = 
  let (_,left,right) = split (fn (key2,_) => 
    match compare key key2 with
      | Less => Less
      | _ => Greater
    end) tree 
  in 
    (left, right)

let partionGt compare tree key = 
  let (_,left,right) = split (fn (key2,_) =>
    match compare key key2 with
      | Greater => Greater
      | _ => Less
    end) tree 
  in 
    (left, right)

let rec lowerBound tree = 
  match tree with 
    | Leaf => None
    | Node {left = Leaf, value} => Some value
    | Node {left} => lowerBound left
  end

let lowerBoundErr tree =
  match lowerBound tree with
  | None => ~onError ()
  | Some x => x
  end

let rec upperBound tree = 
  match tree with 
    | Leaf => None
    | Node { value, right=Leaf} => Some value
    | Node {right} => upperBound right
  end

let upperBoundErr tree =
  match upperBound tree with
  | None => ~onError ()
  | Some x => x
  end

let rec lowerBoundGt compare tree key = 
  match tree with
    | Leaf => None
    | Node {left, value = (key1, value), right} =>
      match compare key key1 with
        | Less => 
          match lowerBoundGt compare left key with
            | None => Some (key1, value)
            | x => x
          end
        | Equal => lowerBound right
        | Greater => lowerBoundGt compare right key
    end
  end

let lowerBoundGtErr compare tree key =
  match lowerBoundGt compare tree key with
  | None => ~onError ()
  | Some x => x
  end

let rec lowerBoundGeq compare tree key =
  match tree with 
    | Leaf => None
    | Node {left, value = (key1, value), right} =>
      match compare key key1 with
        | Less => 
          match lowerBoundGeq compare left key with
            | None => Some (key1,value)
            | x => x
          end
        | Equal => Some (key1, value)
        | Greater => lowerBoundGeq compare right key
    end
  end

let lowerBoundGeqErr compare tree key =
  match lowerBoundGeq compare tree key with
  | None => ~onError ()
  | Some x => x
  end

let rec upperBoundLt compare tree key = 
  match tree with
    | Leaf => None
    | Node {left, value = (key1,value), right} => 
      match compare key key1 with
        | Less => upperBoundLt compare left key
        | Equal => upperBound left
        | Greater => 
          match upperBoundLt compare right key with
            | None => Some (key1,value)
            | x => x
          end
      end
  end

let upperBoundLtErr compare tree key = 
  match upperBoundLt compare tree key with 
  | None => ~onError ()
  | Some x => x
  end

let rec upperBoundLeq compare tree key =
  match tree with 
    | Leaf => None 
    | Node {left, value = (key1,value), right} =>
      match compare key key1 with
        | Less => upperBoundLt compare left key
        | Equal => Some (key1,value)
        | Greater => 
          match upperBoundLeq compare right key with
            | None => Some (key1,value)
            | x => x
          end
      end
  end

let upperBoundLeqErr compare tree key = 
  match upperBoundLeq compare tree key with
  | None => ~onError ()
  | Some x => x
  end

let toList tree = foldr (fn key value acc => (key, value) :: acc) tree []

let toValueList tree = foldr (fn key value acc => value :: acc) tree []

let domain tree = foldr (fn key value acc => key :: acc) tree []

let partion compare tree key =
  let (output,left,right) = split (fn (key2,_) => compare key key2) tree
  in 
    match output with 
      | None => (left,None,right)
      | Some (_,x) => (left,Some x, right)
    end

let _range compare tree left right = 
  match (left,right) with
  | (Inclusion left, Inclusion right) =>
      let (_,middle) = partionGt compare tree left in
      let (result,_) = partionLt compare middle right in result
  | (Inclusion left, Exclusion right) =>
      let (_,middle) = partionGt compare tree left in
      let (result,_) = partionGt compare middle right in result
  | (Exclusion left, Inclusion right) =>
      let (_,middle) = partionLt compare tree left in 
      let (result,_) = partionLt compare middle right in result
  | (Exclusion left, Exclusion right) =>
      let (_,middle) = partionLt compare tree left in
      let (result,_) = partionGt compare middle right in result
  end

let range compare tree incl left incr right =
  match (incl,incr) with
  | (False,False) => _range compare tree (Exclusion left) (Exclusion right)
  | (False,True) => _range compare tree (Exclusion left) (Inclusion right)
  | (True,False) => _range compare tree (Inclusion left) (Exclusion right)
  | (True,True) => _range compare tree (Inclusion left) (Inclusion right)
  end

data MapT Key Val = MapT of Tree (Pair Key Val)

# Wrappers
let isEmptyT (MapT tree) = isEmpty tree

let insertT compare (MapT tree) key val  = MapT (insert compare tree key val)

let insertChangeT compare (MapT tree) key val = 
  let (tree,bool) = insert' compare tree key val in (MapT tree, bool)

let removeT compare (MapT tree) key = MapT (remove compare tree key)

let removeChangeT compare (MapT tree) key = 
  let (tree,bool) = remove' compare tree key in (MapT tree, bool)

let memberT compare (MapT tree) key = member compare tree key

let findT compare (MapT tree) key = find compare tree key

let operateT compare (MapT tree) key absentf presentf =
  let (val,res,tree) = operate compare tree key absentf presentf 
    in (val,res, MapT tree)

let mapFoldl (MapT tree) func acc = foldl func tree acc

let mapFoldr (MapT tree) func acc = foldr func tree acc

let toListT (MapT tree) = toList tree

let toValueListT (MapT tree) = toValueList tree

let domainT (MapT tree) =  domain tree

let mapVal (MapT tree) func = MapT (map tree func)

let mapKey (MapT tree) func = MapT (map2 tree func)

let appT (MapT tree) func = app tree func

let unionT compare (MapT tree1) (MapT tree2) merge = 
  MapT (union compare tree1 tree2 merge)

let partionT compare (MapT tree) key = 
  let (t1,v,t2) = partion compare tree key 
    in (MapT t1, v, MapT t2)

let partionLtT compare (MapT tree) key = 
  let (t1,t2) = partionLt compare tree key
    in (MapT t1, MapT t2)

let partionGtT compare (MapT tree) key = 
  let (t1,t2) = partionGt compare tree key
    in (MapT t1, MapT t2)

let rangeT compare (MapT tree) incl left incr right = 
  MapT (range compare tree incl left incr right)

let lowerBoundT (MapT tree) = lowerBound tree

let lowerBoundTErr (MapT tree) = lowerBoundErr tree

let upperBoundT (MapT tree) = upperBound tree

let upperBoundTErr (MapT tree) = upperBoundErr tree

let lowerBoundGtT compare (MapT tree) key = lowerBoundGt compare tree key

let lowerBoundGtTErr compare (MapT tree) key =
  lowerBoundGtErr compare tree key

let upperBoundLtT compare (MapT tree) key = upperBoundLt compare tree key

let upperBoundLtTErr compare (MapT tree) key =
  upperBoundLtErr compare tree key

let lowerBoundGeqT compare (MapT tree) key = lowerBoundGeq compare tree key

let lowerBoundGeqTErr compare (MapT tree) key =
  lowerBoundGeqErr compare tree key

let upperBoundLeqT compare (MapT tree) key = upperBoundLeq compare tree key

let upperBoundLeqTErr compare (MapT tree) key = 
  upperBoundLeqErr compare tree key

pub let make {Key} (compare : Key -> Key -> [] Ordered) = Map {
  T = MapT Key
  , empty = MapT Leaf
  , method isEmpty = isEmptyT
  , method insert = insertT compare
  , method insertChange = insertChangeT compare
  , method remove = removeT compare
  , method removeChange = removeChangeT compare
  , method member = memberT compare
  , method find = findT compare
  , method operate = operateT compare
  , method foldl = mapFoldl
  , method foldr = mapFoldr
  , method toList = toListT
  , method toValueList = toValueListT
  , method domain = domainT
  , method mapVal = mapVal
  , method mapKey = mapKey
  , method app = appT
  , method union = unionT compare
  , method partion = partionT compare
  , method partionLt = partionLtT compare
  , method partionGt = partionGtT compare
  , method range = rangeT compare 
  , method lowerBound = lowerBoundT
  , method lowerBoundErr = lowerBoundTErr
  , method upperBound = upperBoundT
  , method upperBoundErr = upperBoundTErr
  , method lowerBoundGt = lowerBoundGtT compare
  , method lowerBoundGtErr = lowerBoundGtTErr compare
  , method lowerBoundGeq = lowerBoundGeqT compare
  , method lowerBoundGeqErr = lowerBoundGeqTErr compare
  , method upperBoundLt = upperBoundLtT compare
  , method upperBoundLtErr = upperBoundLtTErr compare
  , method upperBoundLeq = upperBoundLeqT compare
  , method upperBoundLeqErr = upperBoundLeqTErr compare
}
