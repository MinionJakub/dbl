(* This file is part of DBL, released under MIT license.
 * See LICENSE for details.
*)

pub data Comparable = Eq| Noteq

pub data Ordered = 
| Less
| Equal
| Greater

pub data Interval Value = Inclusion of Value | Exclusion of Value

pub let ordToComp elem = match elem with | Equal => Eq | _ => Noteq end

pub method toComparable {self : Ordered} = ordToComp self

pub let getIntervalList pairInterval compare travers struct = 
  match pairInterval with
  | Inclusion v1, Inclusion v2 =>
      travers (fn x acc => 
        match (compare v1 x, compare x v2) with
        | (Equal, Less)     => x :: acc
        | (Equal, Equal)    => x :: acc
        | (Greater, Equal)  => x :: acc 
        | (Greater, Less)   => x :: acc
        | _                 => acc
        end
      ) struct []
  | Inclusion v1, Exclusion v2 =>
      travers (fn x acc =>
        match (compare v1 x, compare x v2) with
        | (Equal, Less)     => x :: acc
        | (Greater, Less)   => x :: acc
        | _                 => acc
        end
      ) struct []
  | Exclusion v1, Inclusion v2 => 
      travers (fn x acc =>
        match (compare v1 x, compare x v2) with
        | (Greater,Less)    => x :: acc
        | (Greater,Equal)   => x :: acc
        | _                 => acc
        end
      ) struct []
  | Exclusion v1, Exclusion v2 =>
      travers (fn x acc => 
        match (compare v1 x, compare x v2) with
        | (Greater,Less) => x :: acc
        | _              => acc
        end
      ) struct []
  end