rec 
  data Color = Red | Black
  data Tree Value = Leaf | Node of Color, Tree Value , Value , Tree Value
end

method empty {X,self : Tree X} = Leaf

let isEmpty tree = 
  match tree with
  | Leaf => True
  | _ => False
  end

method isEmpty {X, self : Tree X} = isEmpty self

let id x = x

let balance tree =
  match tree with
  | Node Black (Node Red (Node Red a x b) y c) z d =>
    Node Red (Node Black a x b) y (Node Black c z d)
  | Node Black (Node Red a x (Node Red b y c)) z d =>
    Node Red (Node Black a x b) y (Node Black c z d)
  | Node Black a x (Node Red (Node Red b y c) z d) =>
    Node Red (Node Black a x b) y (Node Black c z d)
  | Node Black a x (Node Red b y (Node Red c z d)) =>
    Node Red (Node Black a x b) y (Node Black c z d)
  | x => x
end 

let paintItBlack tree = 
  match tree with
  | Node Red a x b =>  Node Black a x b
  | _ => tree
  end

let repaint tree = 
  match tree with
  | Node Red _ _ _ => (False,paintItBlack tree)
  | _ => (True, tree)
  end

let checkDeleteLeft color tree = 
  match color,tree with
  | (Red,Leaf) => (False,Leaf)
  | (Black,Leaf) => (True,Leaf)
  | (Black, Node Red Leaf x Leaf) => (False, Node Black Leaf x Leaf)
  | _ => (False,tree) (*Impossible*)
  end

let repairLeft tuple = 
  match tuple with
  | (Black,Node Red (Node Red a x b) y c, z ,d) 
    => Node Red (Node Black a x b) y (Node Black c z d)
  | (Black,Node Red a x (Node Black b y c), z,d) 
    => Node Red (Node Black a x b) y (Node Black c z d)
  | (color,a,x,b) => Node color a x b 
  end

let repairRight tuple =
  match tuple with
  | (Black,a,x,Node Red b y (Node Red c z d))
    => Node Red (Node Black a x b) y (Node Black c z d)
  | (Black,a,x,Node Red (Node Red b y c) z d) 
    => Node Red (Node Black a x b) y (Node Black c z d)
  | (color,a,x,b) => Node color a x b
  end

let repairAfterDeleteLeft tuple =
  match tuple with
  | (False,color,left,value,right) 
    => (False,Node color left value right)
  | (True,Red,left,value,Node Red b y c) 
    => (False,repairRight (Black,left,value,Node Red b y c))
  | (True,Black,_,x,Leaf) 
    => (False,Node Black Leaf x Leaf)
  | (True,Black,left,x,Node Black b y c) 
    => repaint (repairRight (Black,left,x,Node Red b y c))
  | (True,Black,_,x,Node Red Leaf y Leaf) 
    => (False, Node Black Leaf x (Node Red Leaf y Leaf))
  | (True,Black,a,x,Node Red (Node Black b y c) z d) 
    => (False, Node Black (repairLeft (Black,Node Red a x b,y,c)) z d)
  | (bf,color,a,x,b)
    => (bf,Node color a x b) (*Impossible*)
  end

let rec delMin tree = 
  match tree with
  | Node color Leaf value right => (Some value, checkDeleteLeft color right)
  | Node color left value right => 
    let (min,(bf,newleft)) = delMin left 
    in (min,repairAfterDeleteLeft (bf,color,newleft,value,right))
  | Leaf => (None,(False,Leaf))
  end

let deleteMin tree = let (value,(_,newtree)) = delMin tree in (value,newtree)

method deleteMin {X,self : Tree X} = deleteMin self

let checkDeleteRight color tree =
  match color,tree with
  | (Black,Leaf) => (True,Leaf)
  | (Red,Leaf) => (False,Leaf)
  | (Black,Node Red Leaf value Leaf) =>
    (False,Node Black Leaf value Leaf)
  | _ => (False,tree) (*Impossible*)
  end

let repairAfterDeleteRight tuple =
  match tuple with
  | (False,color,left,value,right) => (False, Node color left value right)
  | (True,Red,Node Black a x b, value,right)
    => (False, repairLeft (Black,Node Red a x b,value,right))
  | (True,Black,Leaf,value,_) => (False,Node Black Leaf value Leaf)
  | (True,Black,Node Black a x b,value,right) 
    => repaint (repairLeft (Black,Node Red a x b,value,right))
  | (True, Black, Node Red Leaf x Leaf, value, right)
    => (False,Node Black (Node Red Leaf x Leaf) value right)
  | (True,Black, Node Red a x (Node Black b y c),value,right)
    => (False, Node Black a x (repairRight (Black,b,y,Node Red c value right)))
  | (bf,color,left,value,right) => (bf,Node color left value right) (*Impossible*)
  end

let rec delMax tree = 
  match tree with
  | Node color left value Leaf => (Some value, checkDeleteRight color left)
  | Node color left value right 
    => let (min,(bf,newright)) = delMax right 
    in (min,repairAfterDeleteRight(bf,color,left,value,newright))
  | Leaf => (None,(False,Leaf))
  end

let deleteMax tree = 
  let (min,(_,newtree)) = delMax tree
  in (min,newtree) 

method deleteMax {X, self : Tree X} = deleteMax self

let rec del elem tree lt = 
  match tree with
  | Leaf => (False,Leaf)
  | Node color left value right
    => if lt elem value 
    then (let (done,newleft) = del elem left lt 
    in repairAfterDeleteLeft (done,color,newleft,value,right))
    else if lt value elem 
    then (let (done,newright) = del elem right lt 
    in repairAfterDeleteRight (done,color,left,value,right))
    else if isEmpty left then checkDeleteLeft color right
    else if isEmpty right then checkDeleteRight color left
    else (let (maks, (bf,newtree)) = delMax left in
    match maks with
    | Some v => repairAfterDeleteLeft (bf,color,newtree,v,right)
    | None => repairAfterDeleteLeft(bf,color,newtree,elem,right) (*Impossible*)
    end)
  end

let delete elem tree lt = let (_,solution) = del elem tree lt in solution

method remove {X, self : Tree X} elem lt = delete elem self lt

let insert tree elem lt = 
  let rec ins tree =  
    match tree with 
    | Leaf => Node Red Leaf elem Leaf
    | Node color a y b => 
      if lt elem y then balance (Node color (ins a) y b)
      else if lt y elem then balance (Node color a y (ins b))
      else Node color a y b 
    end
  let y = ins tree 
  in match y with
  | Node _ y a b => Node Black y a b
  | Leaf => Leaf
  end

method add {X, self : Tree X} elem lt = insert self elem lt

let toList tree = 
  let rec _toList tree acc =
    match tree with 
    | Leaf => acc
    | Node _ a y b => _toList a (y :: _toList b acc)
    end
  in _toList tree []

method toList {X , self : Tree X} = toList self

let fromList {X} (lista : List X) lt = 
  let rec _fromList lista (acc : Tree X) =
    match lista with 
    | x :: xs => _fromList xs (acc.add x lt)
    | [] => acc
    end 
  in _fromList lista Leaf

let rec foldlRB fun acc from = 
  match from with
  | Leaf => acc
  | Node _ a y b => 
  let left = foldlRB fun acc a in 
  let middle = (fun y left) in
  foldlRB fun middle b
end

let rec foldrRB fun acc from = 
match from with
  | Leaf => acc
  | Node _ a y b => 
  let right = foldlRB fun acc b in 
  let middle = (fun y right) in
  foldlRB fun middle a
end

method traversL {X, self : Tree X} fun acc = foldlRB fun acc self
method traversR {X, self : Tree X} fun acc = foldrRB fun acc self

//TODO: better merge
let merge {X} (from : Tree X) (to : Tree X) lt = 
  foldlRB (fn x (y : Tree X) => y.add x lt) to from

let rec member elem tree lt =
  match tree with 
  | Leaf => False
  | Node _ l v r =>
    if lt elem v then member elem l lt
    else if lt v elem then member elem r lt
    else True
  end


method member {X, self : Tree X} elem lt  = member elem self lt


let add lt tree key value = insert tree (key,value) lt
let join lt tree1 tree2 = merge tree1 tree2 lt
let rmVal lt tree key = match tree with 
  | Leaf => Leaf
  | Node _ _ (_,v) _ => delete (key,v) tree lt
end

let rec _find lt elem tree = 
  match tree with 
  | Leaf => None
  | Node _ l v r => if lt elem v then _find lt elem l 
  else if lt v elem then _find lt elem r else Some v
end

//method find {X,self : Tree X} elem lt = _find lt elem self

let find lt tree key = 
  match tree with 
  | Leaf => None
  | Node _ l v r => let (_,a) = v in _find lt (key,a) tree
end 

let update lt tree key val = let x = rmVal lt tree key in
add lt x key val

let fst (a,b) = a
let snd (a,b) = b

pub data OrderedMap Key Val = Map of 
{
  T
  , empty : T
  , method add : T  -> Key -> Val -> [] T
  , method join : T -> T -> [] T
  , method isEmpty : T -> [] Bool
  , method deleteElem : T -> Key ->  [] T
  , method toList : T -> [] List (Pair Key Val)
  , method update : T -> Key -> Val -> [] T
  , method deleteMax : T -> [] T
  , method deleteMin : T -> [] T
  , method find : T ->  Key -> [] Option (Pair Key Val)
}

pub data OrderedSet Value = Set of {
  T
  , empty : T
  , method isEmpty : T -> [] Bool
  , method insert : T -> Value -> [] T
  , method singleton : Value -> [] T
  , method remove :  T ->  Value ->[] T
  , method union : T -> T -> [] T
  , method find : T -> Value -> [] Bool
  , method deleteMax : T -> [] T
  , method deleteMin : T -> [] T
}


pub let makeMap {Key, Val} (lt : Key -> [] Key -> [] Bool)= 
Map {
  T = Tree (Pair Key Val)
  , empty = Leaf
  , method add = add (fn (a,b) (c,d) => lt a c)
  , method join = join (fn (a,b) (c,d) => lt a c)
  , method isEmpty = isEmpty
  , method deleteElem = rmVal (fn (a,b) (c,d) => lt a c)
  , method toList = toList
  , method update = update (fn (a,_) (key,_) => lt a key)
  , method deleteMax = fn mapa => snd (deleteMax mapa)
  , method deleteMin = fn mapa => snd (deleteMin mapa)
  , method find = find (fn (a,b) (c,d) => lt a c)
}


pub let makeSet {Value} (lt : Value -> [] Value -> [] Bool) = 
Set {
  T = Tree Value
  , empty = Leaf
  , method isEmpty = isEmpty
  , method insert = fn tree elem => insert tree elem lt
  , method singleton = fn elem => insert Leaf elem lt
  , method remove =  fn tree elem => delete elem tree lt
  , method union = join lt 
  , method find = fn tree elem => member elem tree lt
  , method deleteMax = fn mapa => snd (deleteMax mapa)
  , method deleteMin = fn mapa => snd (deleteMin mapa)
}
