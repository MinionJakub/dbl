(* This file is part of DBL, released under MIT license.
 * See LICENSE for details.
*)

import open RedBlackTree
import open OrderedMapSignature

let rec member compare tree key =
  match tree with
  | Leaf => False
  | Node _ _ left (key',_) right => 
    match compare key key' with 
    | Less => member compare left key
    | Equal => True
    | Greater => member compare right key
    end
  end

let rec find compare tree key =
  match tree with 
  | Leaf => None
  | Node _ _ left (key', val) right =>
    match compare key key' with
    | Less => find compare left key
    | Equal => Some val
    | Greater => find compare right key
    end
  end 

let rec operate compare tree key absentf presentf =
  match search (fn (key', _ ) => compare key key') tree [] with
  | (Leaf, zipper) => match absentf () with
    | None => (None,None, tree)
    | Some x => (None,Some x, zipRed (key,x) Leaf Leaf zipper)
    end
  | (Node color bulk left (_, val) right, zipper) =>
    match presentf val with 
    | None => (Some val, None, delete color left right zipper)
    | Some x => (Some val, Some x, zip 
      (Node color bulk left (key,x) right) zipper)
    end
  end 

let rec foldr func tree acc = 
  match tree with
  | Leaf => acc
  | Node _ _ left (key, val) right => 
    let val_right = (foldr func right acc) in
    let val_middle = (func key val val_right) in 
    foldr func left val_middle
  end

let rec foldl func tree acc =
  match tree with
  | Leaf => acc
  | Node _ _ left (key, val) right => 
    let val_left = (foldl func left acc) in
    let val_middle = (func key val val_left) in
    foldl func right val_middle
  end 

let rec map tree func = match tree with
  | Leaf => Leaf
  | Node color bulk left (key,value) right => 
    Node color bulk (map left func) (key,func value) (map right func)
  end

let rec map2 tree func = match tree with
  | Leaf => Leaf
  | Node color bulk left (key, _) right => 
    Node color bulk (map2 left func) (key, func key) (map2 right func)
  end

let rec app tree func = match tree with 
  | Leaf => ()
  | Node _ _ left (key,value) right => 
    let _ = app left func in
    let _ = func key value in
    app right func
  end

let rec union compare tree1 tree2 merge = 
  match tree1 with
  | Leaf => tree2
  | Node _ _ left1 (key1,value1) right1 =>
    match tree2 with 
    | Leaf => tree1
    | _ => let (output,left2,right2) = 
      split (fn (key2,_) => compare key1 key2) tree2
      in let new_pair = match output with
      | None => (key1,value1)
      | Some (_,value2) => (key1, merge key1 value1 value2)
      end in join_val new_pair (union compare left1 left2 merge)
      (union compare right1 right2 merge)
    end
  end

let partionLt compare tree key = 
  let (_,left,right) = split (fn (key2,_) => 
    match compare key key2 with
    | Less => Less
    | _ => Greater
    end) tree in (left, right)

let partionGt compare tree key = 
  let (_,left,right) = split (fn (key2,_) =>
  match compare key key2 with
  | Greater => Greater
  | _ => Less
  end) tree in (left, right)

let rec least tree = 
  match tree with 
  | Leaf => None
  | Node _ _ Leaf res _ => Some res
  | Node _ _ left _ _ => least left
  end

let rec greatest tree = 
  match tree with 
  | Leaf => None
  | Node _ _ _ res Leaf => Some res
  | Node _ _ _ res right => greatest right
  end

let rec leastGt compare tree key = 
  match tree with
  | Leaf => None
  | Node _ _ left (key1, value) right =>
    match compare key key1 with
    | Less => match leastGt compare left key with
      | None => Some (key1, value)
      | x => x
      end
    | Equal => least right
    | Greater => leastGt compare right key
    end
  end

let rec leastGeq compare tree key =
  match tree with 
  | Leaf => None
  | Node _ _ left (key1, value) right =>
    match compare key key1 with
    | Less => match leastGeq compare left key with
      | None => Some (key1,value)
      | x => x
      end
    | Equal => Some (key1, value)
    | Greater => leastGeq compare right key
    end
  end

let rec greatestLt compare tree key = 
  match tree with
  | Leaf => None
  | Node _ _ left (key1,value) right => 
    match compare key key1 with
    | Less => greatestLt compare left key
    | Equal => greatest left
    | Greater => match greatestLt compare right key with
      | None => Some (key1,value)
      | x => x
      end
    end
  end

let rec greatestLeq compare tree key =
  match tree with 
  | Leaf => None 
  | Node _ _ left (key1,value) right =>
    match compare key key1 with
    | Less => greatestLt compare left key
    | Equal => Some (key1,value)
    | Greater => match greatestLeq compare right key with
      | None => Some (key1,value)
      | x => x
      end
    end
  end

pub let makeOrderedMap {Key} (compare : Key -> Key -> [] Ordered) = Map {
  T = Pair Key
  , empty = Leaf
  , singleton = fn key val => Node Black 1 Leaf (key,val) Leaf
  , method isEmpty = fn tree => match tree with | Leaf => True | _ => False end
  , method insert = fn tree key val => 
    match search (fn (key', _ ) => compare key key') tree [] with
    | (Leaf, zipper) => zipRed (key,val) Leaf Leaf zipper
    | ((Node color bulk left _ right), zipper) =>
      zip (Node color bulk left (key,val) right) zipper
    end
  , method insert' = fn tree key val => 
    match search (fn (key', _ ) => compare key key') tree [] with
    | (Leaf, zipper) => (zipRed (key,val) Leaf Leaf zipper, False)
    | ((Node color bulk left _ right), zipper) =>
      (zip (Node color bulk left (key,val) right) zipper, True)
    end
  , method remove = fn tree key => 
    match search (fn (key', _ ) => compare key key') tree [] with
    | (Leaf,_) => tree
    | (Node color _ left _ right, zipper) =>
      delete color left right zipper
    end
  , method remove' = fn tree key => 
    match search (fn (key', _ ) => compare key key') tree [] with
    | (Leaf,_) => (tree,False)
    | (Node color _ left _ right, zipper) =>
      (delete color left right zipper, True)
    end
  , method member = member compare
  , method find = find compare
  , method operate = operate compare
  , method foldl = fn tree func acc => foldl func tree acc
  , method foldr = fn tree func acc => foldr func tree acc
  , method toList = fn tree => 
    foldr (fn key value acc => (key, value) :: acc) tree []
  , method toValueList = fn tree => 
    foldr (fn key value acc => value :: acc) tree []
  , method domain = fn tree => 
    foldr (fn key value acc => key :: acc) tree []
  , method map = fn tree func => map tree func 
  , method map2 = map2
  , method app = app
  , method union = union compare
  , method partion = fn tree key => 
    let (output,left,right) = split (fn (key2,_) => compare key key2) tree
    in match output with 
    | None => (left,None,right)
    | Some (_,x) => (left,Some x, right)
    end
  , method partionLt = partionLt compare
  , method partionGt = partionGt compare
  , method rangeee = fn tree left right =>
    let (_,middle) = partionLt compare tree left in
    let (result,_) = partionGt compare middle right in result
  , method rangeei = fn tree left right =>
    let (_,middle) = partionLt compare tree left in 
    let (result,_) = partionLt compare middle right in result
  , method rangeie = fn tree left right =>
    let (_,middle) = partionGt compare tree left in
    let (result,_) = partionGt compare middle right in result
  , method rangeii = fn tree left right =>
    let (_,middle) = partionGt compare tree left in
    let (result,_) = partionLt compare middle right in result
  , method least = least
  , method greatest = greatest
  , method leastGt = leastGt compare
  , method leastGeq = leastGeq compare
  , method greatestLt = greatestLt compare
  , method greatestLeq = greatestLeq compare 
}
