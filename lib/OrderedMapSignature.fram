(* This file is part of DBL, released under MIT license.
 * See LICENSE for details.
*)
import open RedBlackTree

pub data OrderedMap Key = Map of {
    T
    , empty : {type Val} -> Tree (T Val)
    , singleton : {type Val,E} -> Key -> Val -> [|E] Tree (T Val)
    , method isEmpty : {type Val,E} -> Tree (T Val) -> [|E] Bool
    , method insert : {type Val,E} -> Tree (T Val) -> 
        Key -> Val -> [|E] Tree (T Val)
    , method insert' : {type Val,E} -> Tree (T Val) -> 
        Key -> Val -> [|E] (Pair (Tree (T Val)) Bool)
    , method remove : {type Val,E} -> Tree (T Val) -> 
        Key -> [|E] Tree (T Val)
    , method remove' : {type Val,E} -> Tree (T Val) ->
        Key -> [|E] (Pair (Tree (T Val)) Bool)
    , method member : {type Val,E} -> Tree (T Val) -> Key -> [|E] Bool
    , method find : {type Val,E} -> Tree (T Val) -> Key -> [|E] Option Val
    , method operate : {type Val,E} -> Tree (T Val) -> Key ->
        (Unit -> [|E] Option Val) -> (Val -> [|E] Option Val) -> 
        [|E] (Pair (Pair (Option Val) (Option Val)) (Tree (T Val)))
    , method foldl : {type Val, type A,E} -> Tree (T Val) -> 
        (Key -> Val -> A -> [|E] A) -> A -> [|E] A
    , method foldr : {type Val, type A,E} -> Tree (T Val) -> 
        (Key -> Val -> A -> [|E] A) -> A -> [|E] A
    , method toList : {type Val,E} -> Tree (T Val) -> [|E] List (Pair Key Val)
    , method toValueList : {type Val,E} -> Tree (T Val) -> [|E] List Val
    , method domain : {type Val,E} -> Tree (T Val) -> [|E] List Key
    , method map : {type Val, type A,E} -> Tree (T Val) -> 
        (Val -> [|E] A) -> [|E] Tree (T A)
    , method map2 : {type Val, type A,E} -> Tree (T Val) -> 
        (Key -> [|E] A) -> [|E] Tree (T A)
(*  , method map3 : {type Val, type A,E} -> (Val -> [|E] A) -> 
        Tree (T Val) -> [|E] Tree (T A) *)
    , method app : {type Val,E} -> Tree (T Val) -> 
        (Key -> Val -> [|E] Unit) -> [|E] Unit
    , method union : {type Val,E} -> Tree (T Val) -> Tree (T Val) ->
        (Key -> Val -> Val -> [|E] Val) -> [|E] Tree (T Val)
    , method partion : {type Val,E} -> Tree (T Val) -> Key ->
        [|E] (Pair (Pair (Tree (T Val)) (Option Val)) (Tree (T Val)))
    , method partionLt : {type Val,E} -> Tree (T Val) -> Key ->
        [|E] Pair (Tree (T Val)) (Tree (T Val))
    , method partionGt : {type Val,E} -> Tree (T Val) -> Key ->
        [|E] Pair (Tree (T Val)) (Tree (T Val))
    , method rangeii : {type Val,E} -> Tree (T Val) -> Key -> Key ->
        [|E] Tree (T Val)
    , method rangeie : {type Val,E} -> Tree (T Val) -> Key -> Key ->
        [|E] Tree (T Val)
    , method rangeei : {type Val,E} -> Tree (T Val) -> Key -> Key ->
        [|E] Tree (T Val)
    , method rangeee : {type Val,E} -> Tree (T Val) -> Key -> Key ->
        [|E] Tree (T Val)
    , method least : {type Val,E} -> Tree (T Val) -> [|E] Option (T Val)
    , method greatest : {type Val,E} -> Tree (T Val) -> [|E] Option (T Val)
    , method leastGt : {type Val,E} -> Tree (T Val) -> Key -> [|E] Option (T Val)
    , method leastGeq : {type Val,E} -> Tree (T Val) -> Key -> [|E] Option (T Val)
    , method greatestLt : {type Val,E} -> Tree (T Val) -> 
        Key -> [|E] Option (T Val)
    , method greatestLeq : {type Val,E} -> Tree (T Val) ->
        Key -> [|E] Option (T Val) 
}
