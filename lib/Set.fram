{# This file is part of DBL, released under MIT license.
 # See LICENSE for details.
 #}


import open RedBlackTree

# Signature of Set

implicit ~onError

data Interval Value = Inclusion of Value | Exclusion of Value

pub data Set Elem = Set of {
  T

 {## @brief Creates empty set
   ##}
  , empty : T

 {## @brief Method to testing whether given set is empty or not
   # @return True if it's empty False otherwise
   ##}
  , method isEmpty : T ->[] Bool

 {## @brief Method for inserting element to the set
   # @param Element which will be inserted to the set
   # @return Set with inserted value
   ##}
  , method insert : T -> Elem ->[] T

 {## @brief Method for removing element from the set
   # @param Element which will be removed
   # @return Set with removed element
   ##}
  , method remove : T -> Elem ->[] T

 {## @brief Method to test whether given element is in a given set or not
   # @param Element which will be searched
   # @return True if given element is in given set, false otherwise
   ##}
  , method member : T -> Elem ->[] Bool

 {## @brief Method to fold left through structure of set
   # @param Function that receives element and accumulator
   # @param Accumulator
   # @return Result of applying function on elements of set and accumulator
   ##}
  , method foldl : {type A,E} -> T -> (Elem -> A ->[|E] A) -> A ->[|E] A

 {## @brief Method to fold right through structure of set
   # @param Function that receives element and accumulator
   # @param Accumulator
   # @return Result of applying function on elements of set and accumulator
   ##}
  , method foldr : {type A,E} -> T -> (Elem -> A ->[|E] A) -> A ->[|E] A

 {## @brief Method to convert set to list of elements
   ##}
  , method toList : T ->[] List Elem

 {## @brief Method to create union of two sets
   # @param Set
   # @return Union of two sets
   ##}
  , method union : T -> T ->[] T

 {## @brief Method to create intersection of two sets
   # @param Set
   # @return Intersection of two sets
   ##}
  , method intersection : T -> T ->[] T

 {## @brief Method to create difference of two sets
   # @param Set
   # @return Difference of two sets
   ##}
  , method difference : T -> T ->[] T

 {## @brief Method to check if two sets are equal
   # @param Set
   # @return True if two sets are equal, false otherwise.
   ##}
  , method eq : T -> T ->[] Bool

 {## @brief Method to check if set which called this method is
   # subset of a given set
   # @param Set
   # @return True if set is subset, false otherwise.
   ##}
  , method subset : T -> T ->[] Bool

 {## @brief Split set to two sets one containing elements
   # lesser then given element, second one containing equal or greater
   # @param Elem
   # @return Pair of sets with order and specification previously mentioned
   ##}
  , method partionLt : T -> Elem ->[] (Pair T T)

 {## @brief Split set to two sets one containing elements
   # lesser or equal then given element, second one containing greater
   # @param Elem
   # @return Pair of sets with order and specification previously mentioned
   ##}
  , method partionGt : T -> Elem ->[] (Pair T T)

 {## @brief Method that returns lowest stored value in a set
   # @return Some value if the smallest element exist or otherwise None
   ##}
  , method lowerBound : T ->[] Option Elem

 {## @brief Method that returns lowest stored value in a set
   # @return smallest element or error
   ##}
  , method lowerBoundErr :
      {Err, ~onError : Unit ->[Err] Elem} -> T ->[Err] Elem

 {## @brief Method that returns the greatest stored value in a set
   # @return Some value if the greatest element exist or otherwise None
   ##}
  , method upperBound : T ->[] Option Elem

 {## @brief Method that returns the greatest stored value in a set
   # @return greatest element or error
   ##}
  , method upperBoundErr :
      {Err, ~onError : Unit ->[Err] Elem} -> T ->[Err] Elem

 {## @brief Method that returns the lowest element greater than given element
   # @return Some value or None
   ##}
  , method lowerBoundGt : T -> Elem ->[] Option Elem

 {## @brief Method that returns the lowest element greater than given element
   # @return value or error
   ##}
  , method lowerBoundGtErr :
      {Err, ~onError : Unit ->[Err] Elem} ->  T -> Elem ->[Err] Elem

 {## @brief Method that returns the lowest element greater
   # or equal than given element
   # @return Some value or None
   ##}
  , method lowerBoundGeq : T -> Elem ->[] Option Elem

 {## @brief Method that returns the lowest element greater
   # or equal than given element
   # @return value or error
   ##}
  , method lowerBoundGeqErr :
      {Err, ~onError : Unit ->[Err] Elem} ->  T -> Elem ->[Err] Elem

 {## @brief Method that returns the greatest element lower than given element
   # @return Some value or None
   ##}
  , method upperBoundLt : T -> Elem ->[] Option Elem

 {## @brief Method that returns the greatest element lower than given element
   # @return value or error
   ##}
  , method upperBoundLtErr :
      {Err, ~onError : Unit ->[Err] Elem} ->  T -> Elem ->[Err] Elem

 {## @brief Method that returns the greatest element lower
   # or equal than given element
   # @return Some value or None
   ##}
  , method upperBoundLeq : T -> Elem ->[] Option Elem

 {## @brief Method that returns the greatest element lower
   # or equal than given element
   # @return value or error
   ##}
  , method upperBoundLeqErr :
      {Err, ~onError : Unit ->[Err] Elem} ->  T -> Elem ->[Err] Elem
}

# Red black tree implementation

data rec Q Val = Nil | E of Val, Q Val | T of Tree Val, Q Val

let rec eqMain compare qs1 qs2 =
  match (qs1,qs2) with
  | (Nil,Nil) => True

  | (Nil, E _ _) => False

  | (E _ _, Nil) => False

  | (T Leaf rest, _) => eqMain compare rest qs2

  | (_, T Leaf rest) => eqMain compare qs1 rest

  | (T (Node {left, value = elem, right}) rest, _) =>
    eqMain compare (T left (E elem (T right rest))) qs2

  | (_, T (Node {left, value = elem, right}) rest) =>
    eqMain compare qs1 (T left (E elem (T right rest)))

  | (E elem1 rest1, E elem2 rest2) =>
    match compare elem1 elem2 with
    | Eq => eqMain compare rest1 rest2
    | _ => False
    end
  end

let rec subsetMain comp qs1 qs2 =
  match (qs1,qs2) with
  | (Nil,_) => True

  | (E _ _ , Nil) => False

  | (T Leaf rest, _) => subsetMain comp rest qs2

  | (_ , T Leaf rest) => subsetMain comp qs1 rest

  | (T (Node {left, value = elem, right}) rest, _) =>
    subsetMain comp (T left (E elem (T right rest))) qs2

  | (_, T (Node {left, value = elem, right}) rest) =>
    subsetMain comp qs1 (T left (E elem (T right rest)))

  | (E elem1 rest1, E elem2 rest2) =>
    match comp elem1 elem2 with
    | Lt => False
    | Eq => subsetMain comp rest1 rest2
    | Gt => subsetMain comp qs1 rest2
    end
  end

let partionLt compare tree key1 =
  let comparator key2 =
    match compare key1 key2 with
    | Gt => Gt
    | _ => Lt
    end
  let (_,left,right) = split comparator tree in
  (left,right)

let partionGt compare tree key1 =
  let comparator key2 =
    match compare key1 key2 with
    | Lt => Lt
    | _ => Gt
    end
  let (_, left,right) = split comparator tree in
  (left,right)

let rec least tree =
  match tree with
  | Leaf => None
  | Node {left = Leaf, value} => Some value
  | Node {left} => least left
  end

let leastErr tree =
  match least tree with
  | None => ~onError ()
  | Some x => x
  end

let rec greatest tree =
  match tree with
  | Leaf => None
  | Node {value, right = Leaf} => Some value
  | Node {right} => greatest right
  end

let greatestErr tree =
  match greatest tree with
  | None => ~onError ()
  | Some x => x
  end

let empty = Leaf

let isEmpty tree =
  match tree with
  | Leaf => True
  | _ => False
  end

let rec member compare tree elem =
  match tree with
  | Leaf => False
  | Node {left, value, right} =>
    match compare elem value with
    | Lt => member compare left elem
    | Gt => member compare right elem
    | Eq => True
    end
  end

let insert compare tree elem =
  match search (compare elem) tree [] with
  | (Leaf,zipper) => zipRed elem Leaf Leaf zipper
  | (Node ,_) => tree
  end

let remove compare tree elem =
  match search (compare elem) tree [] with
  | (Leaf, _) => tree
  | (Node {color, left, right}, zipper) => delete color left right zipper
  end

let rec _search compare tree elem =
  match tree with
  | Leaf => False
  | Node {left, value, right} =>
    match compare elem value with
    | Lt => _search compare left elem
    | Gt => _search compare right elem
    | Eq => True
    end
  end

let rec setFoldl tree func acc =
  match tree with
  | Leaf => acc
  | Node {left, value, right} =>
    setFoldl right func (func value (setFoldl left func acc))
  end

let rec setFoldr tree func acc =
  match tree with
  | Leaf => acc
  | Node {left, value, right} =>
    setFoldr left func (func value (setFoldr right func acc))
  end

let rec toList acc tree =
  match tree with
  | Leaf => acc
  | Node {left, value, right} =>
    toList (value :: toList acc right) left
  end

let rec union compare tree1 tree2 =
  match tree1 with
  | Leaf => tree2
  | Node {left = left1, value = key1, right = right1} =>
    match tree2 with
    | Leaf => tree1
    | Node =>
      let (_,left2,right2) = split (compare key1) tree2 in
      let left'  = union compare left1 left2
      let right' = union compare right1 right2 in
      joinVal left' key1 right'
    end
  end

let rec intersection compare tree1 tree2 =
  match tree1 with
  | Leaf => Leaf
  | Node {left = left1, value = key1, right = right1} =>
    match tree2 with
    | Leaf => Leaf
    | _ =>
      let (value_out, left2, right2) = split (compare key1) tree2
      let left = intersection compare left1 left2
      let right = intersection compare right1 right2
      in
      match value_out with
      | Some _ => joinVal left key1 right
      | None => join left right
      end
    end
  end

let rec difference compare tree1 tree2 =
  match tree1 with
  | Leaf => Leaf

  | Node {left = left1, value = key1, right = right1} =>
    match tree2 with
    | Leaf => tree1
    | _ =>
      let (value_out, left2, right2) = split (compare key1) tree2
      let left = difference compare left1 left2
      let right = difference compare right1 right2
      in
      match value_out with
      | Some _ => join left right
      | None => joinVal left key1 right
      end
    end
  end

let eq compare set1 set2 = eqMain compare (T set1 Nil) (T set2 Nil)

let subset compare set1 set2 = subsetMain compare (T set1 Nil) (T set2 Nil)

let rec leastGt compare tree val =
  match tree with
  | Leaf => None
  | Node {left, value = key, right} =>
    match compare val key with
    | Lt =>
      let x = leastGt compare left val in
      match x with
      | None => Some key
      | _ => x
      end
    | Eq => least right
    | Gt => leastGt compare right val
    end
  end

let leastGtErr compare tree val =
  match leastGt compare tree val with
  | None => ~onError ()
  | Some x => x
  end

let rec leastGeq compare tree val =
  match tree with
  | Leaf => None
  | Node {left, value = key, right} =>
    match compare val key with
    | Lt =>
      match leastGeq compare left val with
      | None => Some key
      | x => x
      end
    | Eq => Some val
    | Gt => leastGeq compare right val
    end
  end

let leastGeqErr compare tree val =
  match leastGeq compare tree val with
  | None => ~onError ()
  | Some x => x
  end

let rec greatestLt compare tree val =
  match tree with
  | Leaf => None
  | Node {left, value = key, right} =>
    match compare val key with
    | Lt => greatestLt compare left val
    | Eq => greatest left
    | Gt =>
      match greatestLt compare right val with
      | None => Some key
      | x => x
      end
    end
  end

let greatestLtErr compare tree val =
  match greatestLt compare tree val with
  | None => ~onError ()
  | Some x => x
  end

let rec greatestLeq compare tree val =
  match tree with
  | Leaf => None
  | Node {left, value = key, right} =>
    match compare val key with
    | Lt => greatestLeq compare left val
    | Eq => Some val
    | Gt =>
      match greatestLeq compare right val with
      | None => Some key
      | x => x
      end
    end
  end

let greatestLeqErr compare tree val =
  match greatestLeq compare tree val with
  | None => ~onError ()
  | Some x => x
  end


pub let make {Val} (compare : Val -> Val ->[] Ordered) = Set {
  T = Tree Val
  , empty = empty
  , method isEmpty = isEmpty
  , method insert = insert compare
  , method remove = remove compare
  , method member = member compare
  , method foldl = setFoldl
  , method foldr = setFoldr
  , method toList = toList []
  , method union = union compare
  , method intersection = intersection compare
  , method difference = difference compare
  , method eq = eq compare
  , method subset = subset compare
  , method partionLt = partionLt compare
  , method partionGt = partionGt compare
  , method lowerBound = least
  , method lowerBoundErr = leastErr
  , method upperBound = greatest
  , method upperBoundErr = greatestErr
  , method lowerBoundGt = leastGt compare
  , method lowerBoundGtErr = leastGtErr compare
  , method lowerBoundGeq = leastGeq compare
  , method lowerBoundGeqErr = leastGeqErr compare
  , method upperBoundLt = greatestLt compare
  , method upperBoundLtErr = greatestLtErr compare
  , method upperBoundLeq = greatestLeq compare
  , method upperBoundLeqErr = greatestLeqErr compare
}
