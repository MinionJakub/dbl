(* This file is part of DBL, released under MIT license.
 * See LICENSE for details.
*)

import open RedBlackTree

(** Signature of Set *)

pub data Set Elem = Set of {
  T
  , empty : T
  , method isEmpty : T -> [] Bool
  , method insert : T -> Elem -> [] T
  , method remove : T -> Elem -> [] T
  , method member : T -> Elem -> [] Bool
  , method foldl : {type A,E} -> T -> (Elem -> A -> [|E] A) -> A -> [|E] A
  , method foldr : {type A,E} -> T -> (Elem -> A -> [|E] A) -> A -> [|E] A
  , method toList : T -> [] List Elem
  , method union : T -> T -> [] T
  , method intersection : T -> T -> [] T
  , method difference : T -> T -> [] T
  , method eq : T -> T -> [] Bool
  , method subset : T -> T -> [] Bool
  , method partionLt : T -> Elem -> [] (Pair T T)
  , method partionGt : T -> Elem -> [] (Pair T T)
  , method range : T -> Interval Elem -> Interval Elem -> [] T
  , method least : T -> [] Option Elem
  , method greatest : T -> [] Option Elem
  , method leastGt : T -> Elem -> [] Option Elem
  , method leastGeq : T -> Elem -> [] Option Elem
  , method greatestLt : T -> Elem -> [] Option Elem
  , method greatestLeq : T -> Elem -> [] Option Elem 
}

(** Red black tree implementation *)

data rec Q Val = Nil | E of Val , Q Val | T of Tree Val , Q Val

let rec eqMain eq qs1 qs2 = 
  match (qs1,qs2) with
    | (Nil,Nil) => True

    | (Nil, E _ _) => False

    | (E _ _, Nil) => False

    | (T Leaf rest, _) => eqMain eq rest qs2

    | (_, T Leaf rest) => eqMain eq qs1 rest

    | (T (Node {left, value = elem, right}) rest, _) =>
        eqMain eq (T left (E elem (T right rest))) qs2
    
    | (_, T (Node {left, value = elem, right}) rest) =>
        eqMain eq qs1 (T left (E elem (T right rest)))
    
    | (E elem1 rest1, E elem2 rest2) => 
        match eq elem1 elem2 with
          | Noteq => False
          | Eq => eqMain eq rest1 rest2
        end
  end

let rec subsetMain comp qs1 qs2 = 
  match (qs1,qs2) with
    | (Nil,_) => True
    
    | (E _ _ , Nil) => False
    
    | (T Leaf rest, _) => subsetMain comp rest qs2
    
    | (_ , T Leaf rest) => subsetMain comp qs1 rest
    
    | (T (Node {left, value = elem, right}) rest, _) =>
        subsetMain comp (T left (E elem (T right rest))) qs2
    
    | (_, T (Node {left, value = elem, right}) rest) =>
        subsetMain comp qs1 (T left (E elem (T right rest)))
    
    | (E elem1 rest1, E elem2 rest2) => 
        match comp elem1 elem2 with
          | Less => False
          | Equal => subsetMain comp rest1 rest2
          | Greater => subsetMain comp qs1 rest2
        end
  end

let partionLt compare = fn tree key1 => 
  let (_,left,right) = 
    split 
      (fn key2 => 
        match compare key1 key2 with 
          | Greater => Greater 
          | _ => Less 
        end) 
      tree 
  in (left,right)

let partionGt compare = fn tree key1 => 
  let (_, left,right) =
    split 
      (fn key2 => 
        match compare key1 key2 with 
          | Less => Less 
          | _ => Greater 
        end)
      tree 
  in (left,right)

let rec least tree = 
  match tree with 
    | Leaf => None
    | Node {left = Leaf, value = x} => Some x
    | Node {left} => least left
  end

let rec greatest tree = 
  match tree with 
    | Leaf => None
    | Node {value = x, right = Leaf} => Some x
    | Node {right} => greatest right
  end

let empty = Leaf

let isEmpty tree = 
  match tree with 
    | Leaf => True
    | _ => False
  end

let rec member compare tree elem =
  match tree with
    | Leaf => False
    | Node {left, value, right} =>
        match compare elem value with
          | Less => member compare left elem
          | Greater => member compare right elem
          | Equal => True
        end
  end
    
let insert compare tree elem = 
  match search (fn val => compare elem val) tree [] with 
    | (Leaf,zipper) => zipRed elem Leaf Leaf zipper
    | (Node ,_) => tree
  end

let remove compare tree elem = 
  match search (fn val => compare elem val) tree [] with 
    | (Leaf,_) => tree
    | (Node {color, left, right},zipper) => delete color left right zipper
  end 

let rec _search compare tree elem = 
  match tree with
  | Leaf => False
  | Node {left, value, right} => 
      match compare elem value with
        | Less => _search compare left elem
        | Greater => _search compare right elem
        | Equal => True
      end
  end

let rec setFoldl tree func acc = 
  match tree with
    | Leaf => acc
    | Node {left, value, right} => 
        setFoldl right func (func value (setFoldl left func acc))
  end

let rec setFoldr tree func acc =
  match tree with 
    | Leaf => acc
    | Node {left, value, right} =>
        setFoldr left func (func value (setFoldr right func acc))
  end

let rec toList tree acc =
  match tree with 
    | Leaf => acc
    | Node {left, value, right} => 
        toList left (value :: toList right acc)
  end

let rec union compare tree1 tree2 =
  match tree1 with
    | Leaf => tree2
    | Node {left = left1, value = key1, right = right1} => 
      match tree2 with
        | Leaf => tree1
        | Node => 
            let (_,left2,right2) = split (fn key2 => compare key1 key2) tree2 in
              joinVal (union compare left1 left2) key1 
              (union compare right1 right2)
      end
  end

let rec intersection compare tree1 tree2 =
  match tree1 with
    | Leaf => Leaf
    | Node {left = left1, value = key1, right = right1} => 
      match tree2 with
        | Leaf => Leaf
        | _ => let (value_out, left2, right2) = 
            split (fn key2 => compare key1 key2) tree2 
            in let left = intersection compare left1 left2 
            in let right = intersection compare right1 right2
            in 
            match value_out with
              | Some _ => joinVal left key1 right
              | None => join left right
            end
      end
  end

let rec difference compare tree1 tree2 = 
  match tree1 with
    | Leaf => Leaf
    | Node {left = left1, value = key1, right = right1} => 
        match tree2 with 
          | Leaf => tree1 
          | _ => 
              let (value_out, left2, right2) =
              split (fn key2 => compare key1 key2) tree2
              in let left = difference compare left1 left2
              in let right = difference compare right1 right2
              in 
              match value_out with
                | Some _ => join left right
                | None => joinVal left key1 right
              end
        end
  end

let subset compare set1 set2 = subsetMain compare (T set1 Nil) (T set2 Nil)

let range compare tree left right = 
  match (left,right) with
    | (Inclusion left, Inclusion right) =>
        let (_, tree') = partionLt compare tree left in 
        let (tree'',_) = partionGt compare tree' right in tree''
    | (Exclusion left, Inclusion right) => 
        let (_, tree') = partionGt compare tree left in 
        let (tree'',_) = partionGt compare tree' right in tree''
    | (Inclusion left, Exclusion right) => 
        let (_, tree') = partionLt compare tree left in
        let (tree'',_) = partionLt compare tree' right in tree''
    | (Exclusion left, Exclusion right) => 
        let (_, tree') = partionGt compare tree left in
        let (tree'',_) = partionLt compare tree' right in tree''
  end
        
let rec leastGt compare tree val = 
  match tree with
  | Leaf => None
  | Node {left, value = key, right} => 
      match compare val key with
        | Less => let x = leastGt compare left val in
            match x with
              | None => Some key
              | _ => x
            end
        | Equal => least right
        | Greater => leastGt compare right val
      end
  end 

let rec leastGeq compare tree val =
  match tree with 
  | Leaf => None
  | Node {left, value = key, right} => 
      match compare val key with
        | Less => 
            match leastGeq compare left val with 
              | None => Some key 
              | x => x 
            end
        | Equal => Some val
        | Greater => leastGeq compare right val
      end
  end

let rec greatestLt compare tree val =
  match tree with 
    | Leaf => None
    | Node {left, value = key, right} => 
        match compare val key with
          | Less => greatestLt compare left val
          | Equal => greatest left
          | Greater => 
              match greatestLt compare right val with 
                | None => Some key 
                | x => x
              end
        end
  end

let rec greatestLeq compare tree val =  
  match tree with
    | Leaf => None
    | Node {left, value = key, right} => 
        match compare val key with
          | Less => greatestLeq compare left val
          | Equal => Some val
          | Greater => 
              match greatestLeq compare right val with
                | None => Some key
                | x => x
              end
        end
  end


pub let make {Val} (compare : Val -> Val -> [] Ordered) = Set {
  T = Tree Val
  , empty = empty
  , method isEmpty = isEmpty
  , method insert = insert compare
  , method remove = remove compare
  , method member = member compare
  , method foldl = setFoldl
  , method foldr = setFoldr
  , method toList = fn tree => toList tree []
  , method union = union compare
  , method intersection = intersection compare
  , method difference = difference compare
  , method eq = fn set1 set2 => 
      eqMain (fn e1 e2 => (compare e1 e2).toComparable) (T set1 Nil) (T set2 Nil)
  , method subset = subset compare
  , method partionLt = partionLt compare
  , method partionGt = partionGt compare
  , method range = range compare
  , method least = least
  , method greatest = greatest
  , method leastGt = leastGt compare
  , method leastGeq = leastGeq compare
  , method greatestLt = greatestLt compare
  , method greatestLeq = greatestLeq compare
}
